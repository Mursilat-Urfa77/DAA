#include <stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}
int knapSack(int capacity, int weights[], int values[], int numItems) {
    int dp[numItems + 1][capacity + 1];

    for (int i = 0; i <= numItems; i++) {
        for (int w = 0; w <= capacity; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (weights[i - 1] <= w)
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            else
                dp[i][w] = dp[i - 1][w];
        }
    }

    return dp[numItems][capacity];
}

int main() {
    int weights[] = {10, 20, 30};
    int values[] = {60, 100, 120};
    int capacity = 50;
    int numItems = sizeof(values) / sizeof(values[0]);

    int maxValue = knapSack(capacity, weights, values, numItems);
    printf("Maximum value that can be obtained: %d\n", maxValue);

    return 0;
}
